#!/usr/bin/env bash

EC2_METADATA() {
  METADATA_TOKEN="$(curl -s -X PUT -H 'X-aws-ec2-metadata-token-ttl-seconds: 300' http://169.254.169.254/latest/api/token)"
  INSTANCE_ARCH=$(if [ "$(uname -m)" == "x86_64" ]; then echo "amd64"; else echo "arm64"; fi)
  INSTANCE_ID=$(curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" -s http://169.254.169.254/latest/meta-data/instance-id)
  INSTANCE_IP=$(curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" -s http://169.254.169.254/latest/meta-data/local-ipv4)
  INSTANCE_REGION=$(curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" -s http://169.254.169.254/latest/meta-data/placement/region)
  INSTANCE_TYPE=$(curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" -s http://169.254.169.254/latest/meta-data/instance-type)
  INSTANCE_ZONE=$(curl -s -H "X-aws-ec2-metadata-token: $METADATA_TOKEN" -s http://169.254.169.254/latest/meta-data/placement/availability-zone)

  if [ "$INSTANCE_REGION" == "us-east-1" ]; then
    NODE_NAME="$(hostname).ec2.internal"
  else
    NODE_NAME="$(hostname).$INSTANCE_REGION.compute.internal"
  fi
}

MOUNT_VOL() {

  until [ -e "/dev/xvdc" ]; do
    aws ec2 attach-volume \
      --device "xvdc" \
      --instance-id "$INSTANCE_ID" \
      --volume-id "${VOLUME}"
    sleep 1
  done

  BLOCK_DEVICE=$(file /dev/xvdc | awk '{print $NF }')

  if [ -z "$(lsblk -lno FSTYPE "/dev/$BLOCK_DEVICE")" ]; then
    NEW_INSTALL="true"
    mkfs -t xfs "/dev/$BLOCK_DEVICE"
  fi

  install -Dd -m=0700 /var/lib/rancher/k3s
  mount "/dev/$BLOCK_DEVICE" /var/lib/rancher/k3s
}

ENSURE_DIRS() {
  for DIR in \
    /etc/rancher/k3s \
    /var/lib/rancher/credentialprovider/bin \
    /var/lib/rancher/k3s/agent/images; do
    install -Dd -m=0750 "$DIR"
  done
}

SET_ENV_FILES() {
  cat >/opt/k3s.env <<EOF
BUCKET="${BUCKET}"
NAME="${NAME}"
PRIVATE_IP="${PRIVATE_IP}"
PUBLIC_IP="${PUBLIC_IP}"
ROLE="controlplane"
VOLUME="${VOLUME}"
export BUCKET NAME PRIVATE_IP PUBLIC_IP ROLE VOLUME
EOF

  cat >/etc/hosts <<EOF
${PRIVATE_IP} localhost
${PRIVATE_IP} $(hostname)
${PRIVATE_IP} $NODE_NAME
${PRIVATE_IP} controlplane.${NAME}.internal
EOF

  cat >/etc/rancher/k3s/resolv.conf <<EOF
nameserver 169.254.169.253
EOF

  cat >/var/lib/rancher/credentialprovider/config.yaml <<EOF
apiVersion: kubelet.config.k8s.io/v1
kind: CredentialProviderConfig
providers:
  - name: ecr-credential-provider
    matchImages:
      - "*.dkr.ecr.*.amazonaws.com"
      - "*.dkr.ecr.*.amazonaws.com.cn"
      - "*.dkr.ecr-fips.*.amazonaws.com"
      - "*.dkr.ecr.us-iso-east-1.c2s.ic.gov"
      - "*.dkr.ecr.us-isob-east-1.sc2s.sgov.gov"
    defaultCacheDuration: "12h"
    apiVersion: credentialprovider.kubelet.k8s.io/v1
EOF
}

S3_COPY() {
  aws s3 cp s3://"${BUCKET}"/files/"$INSTANCE_ARCH"/amazon-ssm-agent.rpm /tmp/amazon-ssm-agent.rpm
  aws s3 cp s3://"${BUCKET}"/files/"$INSTANCE_ARCH"/ecr-credential-provider /var/lib/rancher/credentialprovider/bin/ && chmod +x /var/lib/rancher/credentialprovider/bin/ecr-credential-provider
  aws s3 cp s3://"${BUCKET}"/files/"$INSTANCE_ARCH"/images.tar.zst /var/lib/rancher/k3s/agent/images/k3s-airgap-images.tar.zst
  aws s3 cp s3://"${BUCKET}"/files/"$INSTANCE_ARCH"/k3s /usr/local/bin/ && chmod +x /usr/local/bin/k3s
  aws s3 cp s3://"${BUCKET}"/files/common/install.sh /usr/local/bin/ && chmod +x /usr/local/bin/install.sh
}

SSM_INSTALL() {
  dnf install -y \
    /tmp/amazon-ssm-agent.rpm
  rm -f /tmp/amazon-ssm-agent.rpm
}

K3S_INSTALL() {
  if [ -f "/var/lib/rancher/k3s/server/db/etcd/name" ]; then
    INSTALL_K3S_SKIP_DOWNLOAD=true /usr/local/bin/install.sh \
      server \
      --cluster-reset
  fi

  INSTALL_K3S_SKIP_DOWNLOAD=true /usr/local/bin/install.sh \
    server \
    --cluster-cidr=172.19.0.0/16 \
    --cluster-dns=172.20.0.10 \
    --cluster-init \
    --disable-cloud-controller \
    --disable=servicelb \
    --disable=traefik \
    --kubelet-arg="cloud-provider=external" \
    --kube-apiserver-arg api-audiences="${NAME}" \
    --kube-apiserver-arg service-account-issuer=https://"${BUCKET}".s3."$INSTANCE_REGION".amazonaws.com/controlplane/oidc \
    --kube-apiserver-arg service-account-jwks-uri=https://"${BUCKET}".s3."$INSTANCE_REGION".amazonaws.com/controlplane/oidc/openid/v1/jwks \
    --node-label node.kubernetes.io/instance-type="$INSTANCE_TYPE" \
    --node-label node.kubernetes.io/id="$INSTANCE_ID" \
    --node-label topology.kubernetes.io/region="$INSTANCE_REGION" \
    --node-label topology.kubernetes.io/zone="$INSTANCE_ZONE" \
    --node-name "$NODE_NAME" \
    --node-taint "node-role.kubernetes.io/control-plane=:NoSchedule" \
    --resolv-conf /etc/rancher/k3s/resolv.conf \
    --service-cidr=172.20.0.0/16 \
    --tls-san=controlplane."${NAME}".internal \
    --tls-san="${PUBLIC_IP}" \
    --tls-san="${PRIVATE_IP}"
}

K3S_NEW_INSTALL() {
  for S3_FILE in \
    /var/lib/rancher/k3s/server/agent-token \
    /var/lib/rancher/k3s/server/token
  do
    until [ -f "$S3_FILE" ]; do
      sleep 1
    done
    aws s3 cp "$S3_FILE" "s3://${BUCKET}/controlplane/$(basename $S3_FILE)"
  done

  until [ -f /etc/rancher/k3s/k3s.yaml ]; do
    sleep 1
  done
  sed 's#https://.*:6443#https://'"${PUBLIC_IP}"':6443#' /etc/rancher/k3s/k3s.yaml | aws s3 cp - s3://"${BUCKET}"/controlplane/config --content-type text/plain

  for OIDC_DIR in \
    /opt/k3s/oidc/.well-known \
    /opt/k3s/oidc/openid/v1
  do
    install -Dd -m=0700 "$OIDC_DIR"
  done

  awk -F': ' '/client-certificate-data/ {print $2}' /etc/rancher/k3s/k3s.yaml | base64 -d > /opt/k3s/oidc/admin.pem
  awk -F': ' '/client-key-data/ {print $2}' /etc/rancher/k3s/k3s.yaml | base64 -d > /opt/k3s/oidc/admin.key
  awk -F': ' '/certificate-authority-data/ {print $2}' /etc/rancher/k3s/k3s.yaml | base64 -d > /opt/k3s/oidc/ca.pem
  openssl x509 -in /opt/k3s/oidc/ca.pem -fingerprint -noout | awk -F'=' 'gsub(/:/,"",$0) { print $2 }' > /opt/k3s/oidc/ca.thumbprint
  curl -s --cert /opt/k3s/oidc/admin.pem --key /opt/k3s/oidc/admin.key --cacert /opt/k3s/oidc/ca.pem https://localhost:6443/.well-known/openid-configuration > /opt/k3s/oidc/.well-known/openid-configuration
  curl -s --cert /opt/k3s/oidc/admin.pem --key /opt/k3s/oidc/admin.key --cacert /opt/k3s/oidc/ca.pem https://localhost:6443/openid/v1/jwks > /opt/k3s/oidc/openid/v1/jwks

  for OIDC_FILE in \
    ca.thumbprint \
    .well-known/openid-configuration \
    openid/v1/jwks
  do
    aws s3 cp \
      "/opt/k3s/oidc/$OIDC_FILE" \
      "s3://${BUCKET}/controlplane/oidc/$OIDC_FILE" \
      --content-type text/plain

    aws s3api put-object-tagging \
      --bucket "${BUCKET}" \
      --key "controlplane/oidc/$OIDC_FILE" \
      --tagging TagSet='[{Key=public,Value=true}]'
  done
}

EC2_METADATA
MOUNT_VOL
ENSURE_DIRS
SET_ENV_FILES
S3_COPY
SSM_INSTALL
K3S_INSTALL
if [ -n "$NEW_INSTALL" ]; then K3S_NEW_INSTALL; fi
